version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 localhost 2181 | grep -q imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/9092'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  etl-service:
    build: ./etl-service
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka_network

  data-generator:
    build: ./data-generator
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka_network

  dashboard:
    build: ./dashboard
    ports:
      - "3001:3001"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  aggregator:
    build: ./aggregator
    ports:
      - "5000:5000"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/aggregated || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: your_user
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kafka_network

  schema-registry:
      image: confluentinc/cp-schema-registry:6.2.0
      depends_on:
        - kafka
      environment:
        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
        SCHEMA_REGISTRY_HOST_NAME: schema-registry
        SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      ports:
        - "8081:8081"
      networks:
        - kafka_network

  kafka-connect:
      image: confluentinc/cp-kafka-connect:6.2.0
      depends_on:
        - kafka
        - schema-registry
      environment:
        CONNECT_BOOTSTRAP_SERVERS: kafka:9092
        CONNECT_REST_PORT: 8083
        CONNECT_GROUP_ID: "kafka-connect-group"
        CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
        CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
        CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
        CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
        CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
        CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
        CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
        CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
        CONNECT_PLUGIN_PATH: "/usr/share/java"
      ports:
        - "8083:8083"
      networks:
        - kafka_network
  scala-service:
     build: ./scala-service
     environment:
       - HADOOP_HOME=/opt/hadoop
       - hadoop.home.dir=/opt/hadoop
     networks:
       - kafka_network

  go-service:
      build: ./go-service
      networks:
        - kafka_network

  rust-service:
      build: ./rust-service
      networks:
        - kafka_network

  r-shiny-dashboard:
      build: ./r-shiny-dashboard
      ports:
        - "3838:3838"
      networks:
        - kafka_network
  csharp-gateway:
      build: ./csharp-gateway
      ports:
        - "8080:80"
      networks:
        - kafka_network
  prometheus:
      image: prom/prometheus:latest
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      ports:
        - "9090:9090"
      networks:
        - kafka_network
  grafana:
      image: grafana/grafana:latest
      depends_on:
        - prometheus
      ports:
        - "3000:3000"
      networks:
        - kafka_network
      volumes:
        - grafana_data:/var/lib/grafana
volumes:
  postgres_data:
  grafana_data:

networks:
  kafka_network:
    driver: bridge
